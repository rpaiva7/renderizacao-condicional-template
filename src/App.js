import styled, { createGlobalStyle } from "styled-components";
import TelaLogin from "./components/TelaLogin/TelaLogin";
import TelaCadastro from "./components/TelaCadastro/TelaCadastro";
import TelaPrincipal from "./components/TelaPrincipal/TelaPrincipal.js";
import { useState } from "react";

const GlobalStyled = createGlobalStyle`
  html {
    font-family: sans-serif9;
  }

  * {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
  }
`
const MainContainer = styled.main`
  height: 100vh;
`

function App() {
  const [tela, setTela] = useState(3)

  const trocarDeTela = (tela) => {
    setTela(tela)
  }

  // 1 -> TelaLogin
  // 2 -> TelaCadastro

  // 2 formas de fazer essa condicional: com if ou tern√°rio. Tern√°rio geralmente √© melhor pq √© mais simples e direto, por√©m n√£o √© uma boa pr√°tica tern√°rios com mais de 2 condi√ß√µes/op√ß√µes de resposta.

  //CONDICIONAL COM IF

   /*  if (tela === 1) {
      return (
        <MainContainer>
        <GlobalStyled />
        <TelaLogin trocarDeTela={trocarDeTela} />
      </MainContainer>
    )
    }
  
    else if (tela === 2) {
      return (
        <MainContainer>
        <GlobalStyled />
        <TelaCadastro trocarDeTela={trocarDeTela} />
      </MainContainer>
    )
    }

    else {
      return (
        <MainContainer>
        <GlobalStyled />
        <TelaPrincipal trocarDeTela={trocarDeTela} />
      </MainContainer>
    )
    } */

  // CONDICIONAL COM TERN√ÅRIO

  return (
    <MainContainer >
      <GlobalStyled />
      {
        tela === 1 ? 
        <TelaLogin /> //TelaLogin √© igual a 1? Se sim, retorna TelaLogin, se n√£o, retorna TelaCadastro.
        : 
        tela === 2 ? 
        <TelaCadastro /> //TelaCadastro √© igual a 2? Se sim, retorna TelaCadastro, se n√£o, retorna TelaPrincipal.
        :
        <TelaPrincipal /> 
      }
      
    </MainContainer>
  );
}

export default App;

/* Renderiza√ß√£o Condicional

# **Expressions 1Ô∏è‚É£**

- **Resultam** ou **s√£o** um valor
- Um jeito f√°cil de lembrar: algo que pode ser atribu√≠do a uma vari√°vel ou aparecer dentro do console.log()
- Exemplos:
    - Um valor em si: "texto", 2, {name: "Jo√£o"}, [1,2,3]
    - Opera√ß√µes: 3 * 5, "Hello" + "World"
    - Chamadas de Fun√ß√µes: minhaFuncao()
    
    # **Statements üîÅ**

- N√£o resultam em valores, s√£o apenas instru√ß√µes
- Exemplos:
    - Condicionais comuns (if, else)
    - Loops (while, for)
- Um jeito f√°cil de lembrar: algo que n√£o pode ser atribu√≠do a uma vari√°vel

# **Express√µes Condicionaisüí°**

- **Express√µes Condicionais** definem um valor dependendo de uma condi√ß√£o
- At√© agora, vimos tr√™s tipos de condicionais: **if/else**, **while**, **switch case.** Essas condicionais **n√£o** podem se tornar uma express√£o.
- Veremos mais dois tipos de condicionais: **Tern√°rios** e **Curto Circuito**
- A diferen√ßa: **S√£o express√µes**, ou seja, podem se tornar um **√∫nico valor**!

# **Tern√°rio üî®**

- √â como "transformar" um **if/else** em uma express√£o
- A estrutura de um tern√°rio depende de tr√™s coisas:
    - Condi√ß√£o
    - Express√£o verdadeira
    - Express√£o falsa

    https://file.notion.so/f/s/1ebc55e0-6286-489c-ab72-1484aa7297bf/5._REESTRUTURADO_-_Renderizacao_Condicional.svg?id=5aa211b0-d6f3-4055-a761-2b5db6a8253e&table=block&spaceId=f97190af-c9c2-4592-9ae2-6311b6b728de&expirationTimestamp=1687833296132&signature=5MBSL45Qrvb3tB0fFX7zJxbVRDCla91jcpc6_oyUC-M&downloadName=5.+%5BREESTRUTURADO%5D+-+Renderizac%CC%A7a%CC%83o+Condicional.svg
    
    ‚ùå¬†Antes n√£o pod√≠amos alocar if/else em vari√°veis 
    
    const condicao = if (n1 > 0 && n2 > 0){...}
    
    ‚úÖ¬†Agora nossa condicional pode ser alocada dentro de uma vari√°vel!
    
    const condicao = n1 > 0 && n2 > 0 ? console.log("As duas express√µes s√£o verdadeiras") : console.log("Uma das express√µes n√£o √© verdadeira")
    
    
    # **Curto Circuito üîß**

- No Curto Circuito, usamos operadores l√≥gicos para definir a condi√ß√£o
- Ao fazer opera√ß√µes com operadores l√≥gicos **&&** e **||**, a linguagem "para de executar" assim que **j√° sabe o resultado**
- Isso permite que usemos esses operadores para criar express√µes condicionais

## ****Curto Circuito - && üîß****

- O operador && retorna true somente quando **ambos os valores s√£o true**
- Portanto, se o primeiro valor √© ***falsy***, n√£o √© necess√°rio olhar para o segundo valor
- Assim, √© poss√≠vel us√°-lo para executar uma express√£o condicionalmente somente quando algum valor espec√≠fico for ***truthy***

## ****Curto Circuito - || üîß****

- O operador || retorna false somente quando **ambos os valores s√£o false.**
- Portanto, se o primeiro valor √© ***truthy***, n√£o √© necess√°rio nem olhar para o segundo valor
- Assim, √© poss√≠vel us√°-lo para **executar uma express√£o** condicionalmente somente quando algum valor espec√≠fico for ***falsy***

# Renderiza√ß√£o Condicional

## **Conceito üîÄ**

- Queremos modificar o que √© renderizado na tela com base em **par√¢metros**, normalmente, vindos de **estado** ou **props**
- Vamos usar **condicionais** Javascript para determinar o JSX a ser retornado

## **Estrat√©gia üîÄ**

- Existem v√°rias formas de retornar JSX diferentes com base nas diferentes formas que temos de fazer **condicionais** **em Javascript**
- Vamos ver alguns exemplos:

- if/else
- Switch case
- Express√µes condicionais (tern√°rios e curto circu√≠tos)

*/